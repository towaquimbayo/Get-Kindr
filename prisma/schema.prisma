generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = "postgres://default:U2weChZDLnJ9@ep-cold-cake-a45x34h1-pooler.us-east-1.postgres.vercel-storage.com:5432/verceldb?pgbouncer=true&connect_timeout=15"
  directUrl = "postgres://default:U2weChZDLnJ9@ep-cold-cake-a45x34h1.us-east-1.postgres.vercel-storage.com:5432/verceldb"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String        @id @default(cuid())
  hashedPassword String?
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  phoneNumber    String?
  image          String
  accountType    AccountType   @default(VOLUNTEER)
  admin          Boolean       @default(false)
  tokenBalance   Int           @default(0)
  accounts       Account[]
  organization   Organization?
  sessions       Session[]
  volunteer      Volunteer?
  wallet         Wallet?
}

model Event {
  id               String           @id @default(uuid())
  name             String
  description      String?
  start_time       DateTime
  end_time         DateTime
  organization_id  String
  tags             String[]
  address          String
  city             String
  recurring        Boolean
  online           Boolean
  token_bounty     Int
  number_of_spots  Int
  status           String
  latitude         Float
  longitude        Float
  organization     Organization     @relation(fields: [organization_id], references: [id])
  event_volunteers EventVolunteer[]
}

model EventVolunteer {
  id          String    @id @default(cuid())
  eventId     String
  volunteerId String
  event       Event     @relation(fields: [eventId], references: [id])
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])

  @@unique([eventId, volunteerId])
}

model Volunteer {
  id              String           @id @default(cuid())
  userId          String           @unique
  bio             String
  volunteerEvents EventVolunteer[]
  user            User             @relation(fields: [userId], references: [id])
}

model Organization {
  id          String  @id @default(cuid())
  userId      String  @unique
  name        String
  description String?
  address     String?
  events      Event[]
  user        User    @relation(fields: [userId], references: [id])
}

model Wallet {
  id                     String        @id @default(cuid())
  userId                 String        @unique
  balance                Int
  transactionsFromWallet Transaction[] @relation("TransactionFromWallet")
  transactionsToWallet   Transaction[] @relation("TransactionToWallet")
  user                   User          @relation(fields: [userId], references: [id])
}

model Transaction {
  id                  String   @id @default(cuid())
  sourceWalletId      String
  destinationWalletId String
  amount              Int
  createdAt           DateTime @default(now())
  destinationWallet   Wallet   @relation("TransactionFromWallet", fields: [destinationWalletId], references: [id])
  sourceWallet        Wallet   @relation("TransactionToWallet", fields: [sourceWalletId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OneTimePass {
  userEmail   String   @unique
  OneTimePass String   @unique
  expires     DateTime
}

enum AccountType {
  VOLUNTEER
  ORGANIZATION
}
