// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id              String    @id @default(cuid())
  hashedPassword  String?
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  phoneNumber     String?
  image           String
  accounts        Account[]
  sessions        Session[]
  accountType     AccountType @default(VOLUNTEER)
  organization    Organization?
  volunteer       Volunteer?
  wallet          Wallet?
  admin           Boolean @default(false)
  tokenBalance    Int @default(0)
}

model Event {
  id                String   @id @default(uuid())
  name              String
  description       String?
  start_time        DateTime
  end_time          DateTime
  organization_id   String
  organization      Organization @relation(fields: [organization_id], references: [id])
  tags              String[]
  address           String
  city              String
  recurring         Boolean
  online            Boolean
  token_bounty      Int
  number_of_spots   Int
  status            String
  event_volunteers  EventVolunteer[]
  latitude          Float
  longitude         Float
}

model EventVolunteer {
  id        String   @id @default(cuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  volunteerId String
  volunteer Volunteer @relation(fields: [volunteerId], references: [id])
  @@unique([eventId, volunteerId])
}

model Volunteer {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  bio             String
  volunteerEvents EventVolunteer[]
  @@unique([userId])
}

model Organization {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  name            String
  description     String?
  address         String?
  events          Event[]
  @@unique([userId])
}

model Wallet {
  id                      String   @id @default(cuid())
  userId                  String
  user                    User     @relation(fields: [userId], references: [id])
  balance                 Int
  transactionsToWallet    Transaction[]  @relation("TransactionToWallet")
  transactionsFromWallet  Transaction[] @relation("TransactionFromWallet")
  @@unique([userId])
}

model Transaction {
  id                    String   @id @default(cuid())
  sourceWalletId        String
  sourceWallet          Wallet   @relation("TransactionToWallet", fields: [sourceWalletId], references: [id])
  destinationWalletId   String
  destinationWallet     Wallet   @relation("TransactionFromWallet", fields: [destinationWalletId], references: [id])
  amount                Int
  createdAt             DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OneTimePass {
  userEmail    String   @unique
  OneTimePass  String    @unique
  expires      DateTime
}

enum AccountType {
  VOLUNTEER
  ORGANIZATION
}